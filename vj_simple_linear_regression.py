# -*- coding: utf-8 -*-
"""VJ_Simple linear Regression

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16AXQs0YvBYe4d5H_mnQfKXyhTrmgkBzI
"""

# Commented out IPython magic to ensure Python compatibility.
#importing necessary packages
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

#importing the dataset name "Salary_Data.csv"
j=pd.read_csv('/content/Car_Purchasing_Data.csv')

j.head()#to print the first five records

j.tail()#to print the last 5 records

j.shape#to print the shape of the dataset

j.dtypes#data types used in each column

j.columns#to know the column names

j.describe()#statistical description of each column

j.info()#to print information about dataframe

len(j["Customer Name"].unique())#to print length of unique values

j["Customer Name"].nunique()#to return the number of unique elements in the object

"""Checking for NULL values"""

j.isnull().sum()#to print sum of the null values

j.isna().sum()#used to detect the missing values

"""Droping the objects attributes"""

j.drop(['Customer Name','Customer e-mail', 'Country'] , axis = 1, inplace=True)#dropping of some columns

j.head()#after dropping,to know the first 5 rows

"""Correlation and Covariance using seaborn"""

j.corr()#coreelation of the dataset

s = j.corr()
sns.heatmap(s, cmap='Blues', annot=True)#to show graphical representation of data that uses a system of color-coding to represent different values

sns.countplot(j['Gender'])#to Show the counts of observations in each categorical bin using bars

sns.distplot(j['Annual Salary'])# to represents the overall distribution of continuous data variables

sns.boxplot(j['Credit Card Debt'])#to measure how well distributed the data in a data set

sns.histplot(j['Car Purchase Amount'])#to represent the distribution of a numeric variable for one or several groups

sns.barplot(j['Net Worth'])#to show catergorical data as rectangular bars with the height of bars proportional to the value they represent.

"""Making Pairplot using Seaborn"""

sns.pairplot(j)#to plot a pairwise relationships in a dataset

X= j.iloc[:,:-1]#used to select rows and columns by number, in the order that they appear in the data frame
Y =j.iloc[:,-1]

X

Y

"""Training the Dataset"""

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2,random_state=0)

X_train #training X dataset

X_test #testing X dataset

Y_train #training Y dataset

"""Modelling using Linear Regression"""

from sklearn.linear_model import LinearRegression #importing packages required for linearregression
regressor = LinearRegression()
regressor.fit(X_train,Y_train)

Y_pred = regressor.predict(X_test)

Y_test #testing Y dataset

np.stack((Y_test,Y_pred),axis=1)#used to join a sequence of same dimension arrays along a new axis.

"""Predicted VS Original Dataset Values"""

sns.regplot(Y_pred, Y_test)#used to plot data and a linear regression model fit

"""Calculating the Accuracy"""

Y_pred[1],Y_test[1]

j = pd.DataFrame({'Original Value':Y_test, 'Predicted Value':Y_pred})
j.head()

from sklearn.metrics import r2_score#to print the accurate value of predicted value
r2 = r2_score(Y_pred,Y_test)
r2

"""Analysing errors"""

from sklearn import metrics
print('Mean Absolute Error : ',metrics.mean_absolute_error(Y_test,Y_pred))
print('Mean Squared Error : ',metrics.mean_squared_error(Y_test,Y_pred))
print('Root Mean Squared Error : ',np.sqrt(metrics.mean_squared_error(Y_test,Y_pred)))